package edge

import (
	"testing"
	"time"
)

func TestGetCurrentTS(t *testing.T){
	ts := GetCurrentTS()
	if len(string(ts)) != len(string(time.Now().Unix()*1000)) {
		t.Errorf("Timestamp should be in milliseconds.")
	}
}

func TestEncode(t *testing.T) {
	key := "12345"
	payload := []byte("This is a test")
	sig := "ab06a3c89db83e9e14eae39d28d96b447d07946efbfb478463afec5d367d2812"

	if encode(key, payload) != sig {
		t.Errorf("HMAC signature generated by 'encode' does not match.")
	}
}

func TestStringInSlice(t *testing.T) {
	list := []string{"shape", "circle", "rectangle"}
	if stringInSlice(list, "circle") != true {
		t.Errorf("String circle is expected to be present in list, but returned false.")
	}
	if stringInSlice(list, "triangle") == true {
		t.Errorf("String triangle is expected to be absent in list, but returned true.")
	}
}

func TestCreateThingHeartbeat(t *testing.T) {
	thing := NewThing()
	thing.Key = "test_thing_key"
	data := CreateThingHeartbeat(thing, 0)
	if data["thing_key"] != thing.Key {
		t.Errorf("Expecting data map to contain thing_key as %s but found %s.", thing.Key, data["thing_key"])
	}
	if data["timestamp"] == 0 {
		t.Errorf("Expecting data map to contain a non zero valid timestamp.")
	}

	thing = NewThing()
	thing.DeviceKey = "test_device_key"
	ts := time.Now().Unix() * 1000
	data = CreateThingHeartbeat(thing, ts)
	if data["device_key"] != thing.DeviceKey {
		t.Errorf("Expecting data map to contain thing_key as %s but found %s.", thing.Key, data["device_key"])
	}
	if data["timestamp"] != ts {
		t.Errorf("Expecting data map to contain timestamp as %d, but found %d.", ts, data["timestamp"])
	}
}

func TestCreateThingRegister(t *testing.T) {
	thing := NewThing()
	thing.Key = "test_thing_key"
	data := CreateThingRegister(thing, 0)
	if data["thing_key"] != thing.Key {
		t.Errorf("Expecting data map to contain thing_key as %s but found %s.", thing.Key, data["thing_key"])
	}
	if data["bi_directional"] != false {
		t.Errorf("Expecting data map to contain bi_directional as %t but found %t.", false, data["bi_directional"])
	}
	_,found := data["name"]
	if found {
		t.Errorf("Expecting data map to not contain name field.")
	}
	_,found = data["description"]
	if found {
		t.Errorf("Expecting data map to not contain description field.")
	}
	if data["timestamp"] == 0 {
		t.Errorf("Expecting data map to contain a non zero valid timestamp.")
	}

	thing = NewThing()
	thing.DeviceKey = "test_device_key"
	thing.Name = "thing_name"
	thing.Description = "thing description"
	thing.BiDirectional = true
	ts := time.Now().Unix() * 1000
	data = CreateThingRegister(thing, ts)
	if data["device_key"] != thing.DeviceKey {
		t.Errorf("Expecting data map to contain thing_key as %s but found %s.", thing.Key, data["device_key"])
	}
	if data["bi_directional"] != thing.BiDirectional {
		t.Errorf("Expecting data map to contain bi_directional as %t but found %t.", thing.BiDirectional, data["bi_directional"])
	}
	if data["name"] != thing.Name {
		t.Errorf("Expecting data map to contain name as %s but found %s.", thing.Name, data["name"])
	}
	if data["description"] != thing.Description {
		t.Errorf("Expecting data map to contain description as %s but found %s.", thing.Description, data["description"])
	}
	if data["timestamp"] != ts {
		t.Errorf("Expecting data map to contain timestamp as %d, but found %d.", ts, data["timestamp"])
	}
}

func TestCreateThingEvent(t *testing.T) {
	var found bool
	thing := NewThing()
	thing.Key = "test_thing_key"
	eventData := map[string]interface{} {"voltage": 12}
	waypoint := []float64{18.32, 74.24}
	data := CreateThingEvent(thing, eventData, waypoint, 0)
	if data["thing_key"] != thing.Key {
		t.Errorf("Expecting data map to contain thing_key as %s but found %s.", thing.Key, data["thing_key"])
	}
	if data["data"].(map[string]interface{})["voltage"] != eventData["voltage"] {
		t.Errorf("Expecting data map to contain voltage as %d but found %d.", eventData["voltage"], data["data"].(map[string]interface{})["voltage"])
	}
	if data["waypoint"].([]float64)[0] != waypoint[0] || data["waypoint"].([]float64)[1] != waypoint[1] {
		t.Errorf("Expecting data map to contain waypoint as %v but found %v.", waypoint, data["waypoint"])
	}
	if data["timestamp"] == 0 {
		t.Errorf("Expecting data map to contain a non zero valid timestamp.")
	}

	thing = NewThing()
	thing.DeviceKey = "test_device_key"
	ts := time.Now().Unix() * 1000
	data = CreateThingEvent(thing, eventData, nil, ts)
	if data["device_key"] != thing.DeviceKey {
		t.Errorf("Expecting data map to contain thing_key as %s but found %s.", thing.Key, data["device_key"])
	}
	if data["data"].(map[string]interface{})["voltage"] != eventData["voltage"] {
		t.Errorf("Expecting data map to contain voltage as %d but found %d.", eventData["voltage"], data["data"].(map[string]interface{})["voltage"])
	}
	if _,found = data["waypoint"]; found {
		t.Errorf("Expecting data map to not contain waypoint field.")
	}
	if data["timestamp"] != ts {
		t.Errorf("Expecting data map to contain timestamp as %d, but found %d.", ts, data["timestamp"])
	}

	data = CreateThingEvent(thing, nil, waypoint, ts)
	if _,found = data["data"]; found {
		t.Errorf("Expecting data map to not contain data field.")
	}
	if data["waypoint"].([]float64)[0] != waypoint[0] || data["waypoint"].([]float64)[1] != waypoint[1] {
		t.Errorf("Expecting data map to contain waypoint as %v but found %v.", waypoint, data["waypoint"])
	}
}

func TestCreateAlert(t *testing.T) {
	var found bool
	thing := NewThing()
	thing.Key = "test_thing_key"
	alertData := map[string]interface{} {"voltage": 12}
	msg := "High Voltage found"
	alertType := 1
	data := CreateAlert(thing, msg, alertType, alertData, 0)
	if _,found = data["alert"]; !found {
		t.Errorf("Expecting data map to contain alert field but not found.")
	}
	actualAlertData := data["alert"].(map[string]interface{})
	if actualAlertData["thing_key"] != thing.Key {
		t.Errorf("Expecting alert map to contain thing_key as %s but found %s.", thing.Key, actualAlertData["thing_key"])
	}
	if actualAlertData["message"] != msg {
		t.Errorf("Expecting alert map to contain message as %s but found %s.", msg, actualAlertData["message"])
	}
	if actualAlertData["alert_type"] != alertType {
		t.Errorf("Expecting alert map to contain alert_type as %d but found %s.", alertType, actualAlertData["alert_type"])
	}
	actualVoltage := actualAlertData["data"].(map[string]interface{})["voltage"]
	if actualVoltage != alertData["voltage"] {
		t.Errorf("Expecting alert map to contain voltage inside data hash as %d but found %d.", alertData["voltage"], actualVoltage)
	}
	if data["timestamp"] == 0 {
		t.Errorf("Expecting data map to contain a non zero valid timestamp.")
	}
}

func TestCreateInstructionAlert(t *testing.T) {
	var found bool
	alertKey := "test_alert_key"
	alertData := map[string]interface{} {"execution_status":"success"}
	msg := "Power off instruction recieved."
	alertType := 1
	data := CreateInstructionAlert(alertKey, msg, alertType, alertData, 0)
	if _,found = data["alert"]; !found {
		t.Errorf("Expecting data map to contain alert field but not found.")
	}
	actualAlertData := data["alert"].(map[string]interface{})
	if actualAlertData["alert_key"] != alertKey {
		t.Errorf("Expecting alert map to contain alert_key as %s but found %s.", alertKey, actualAlertData["alert_key"])
	}
	if actualAlertData["message"] != msg {
		t.Errorf("Expecting alert map to contain message as %s but found %s.", msg, actualAlertData["message"])
	}
	if actualAlertData["alert_type"] != alertType {
		t.Errorf("Expecting alert map to contain alert_type as %d but found %s.", alertType, actualAlertData["alert_type"])
	}
	actualExecutionStatus := actualAlertData["data"].(map[string]interface{})["execution_status"]
	if actualExecutionStatus != alertData["execution_status"] {
		t.Errorf("Expecting alert map to contain execution_status inside data as %s but found %s.", alertData["execution_status"], actualExecutionStatus)
	}
	if data["timestamp"] == 0 {
		t.Errorf("Expecting data map to contain a non zero valid timestamp.")
	}
}